#!/usr/bin/env python3

'''
The below code is probably garbage. This is my first 
'real' project, so I am still learning the conventions 
and structures. For now, though, my policy is 
if the code works, it works.
'''

# TODO add config file for setting defaults 
# TODO implement fullscreen flag
# TODO spit out magnet link automatically when peerflix not detected 

import os
import sys
import shutil
from operator import itemgetter
from pathlib import Path

try:
    import requests
except ImportError:
    print('error: requests is not installed (hint: pip3 install requests)')
    exit()

try:
    from lxml import html
except ImportError:
    print('error: lxml is not installed (hint: pip3 install lxml)')
    exit()

responses = []

def main():

    # checks which player(s) exists
    mpv_exists = shutil.which('mpv') is not None
    vlc_exists = shutil.which('vlc') is not None
    if not mpv_exists and not vlc_exists:
        print(f'\033[31;1mError:\033[0m mpv or vlc not found… Exiting.')
        exit()
    elif mpv_exists:
        player = 'mpv'
    elif mpv_exists and vlc_exists:
        player = 'mpv'
    elif not mpv_exists and vlc_exists:
        player = 'vlc'
    

    # creates /home/$USER/.config/cthulhu/ (not needed for now)
    """ os.makedirs(os.path.expanduser('~')+'/.config/cthulhu', exist_ok=True)
    config_dir = os.path.expanduser('~')+'/.config/cthulhu' """

    # parsing arguments
    args = sys.argv
    temp = parse_args(args)
    parsed_args = temp[0]

    # get source
    if parsed_args['--source'][0]:
        source = temp[2]
    else:
        source = '1337x' # change to read from config
    source_class = get_source(source)
    get_responses = source_class.get_responses
    parse_responses = source_class.parse_responses
    get_magnet_link = source_class.get_magnet_link

    # makes a search based on the returned query from parse_args(args)
    query = temp[1]
    search(get_responses, query)

    # change player to vlc if specified by --vlc
    if parsed_args['--vlc'][0] and vlc_exists:
        player = 'vlc'

    # default is just to play all files in torrent sorted by name
    list_mode = '-a'
    if parsed_args['--list'][0]:
        list_mode = '-l'

    # parsing html responses from search query
    results = parse_responses()
    
    # displays results, gets user input, and requests magnet link
    selection  = select_torrent(results, display_count=20)
    magnet_link = get_magnet_link(results, selection)

    # spits out magnet link only (if specified by --get-magnet)
    # else streams torrent like regular
    if parsed_args['--get-magnet'][0] == False:
        while True:
            # play selected torrent in peerflix
            os.system(f'peerflix --{player} {list_mode} \'{magnet_link}\'')
            if list_mode == '-l':
                verification = input('Continue watching another file in the torrent? [Y/n] ')
                if verification == 'n':
                    break
            else:
                break

        # cleans /tmp/webtorrent directory unless specified by --no-clean
        if parsed_args['--no-clean'][0] == False:
            def get_size(folder: str) -> int:  # st_blocks * 512 preferred over st_size because the latter
                                               # calculates the full allocated size even if files not downloaded yet.
                return sum(p.stat().st_blocks * 512 for p in Path(folder).rglob('*'))
            def dirsize(size: int) -> str:
                for unit in ("B", "K", "M", "G", "T"):
                    if size < 1024:
                        break
                    size /= 1024
                return f'{size:.1f}{unit}'
            cachesize = dirsize(get_size('/tmp/torrent-stream'))
            print(f'Cleaning /tmp/torrent-stream cache (~'
                + cachesize
                + ')…')
            os.system('rm -rf /tmp/torrent-stream')
    else: 
        print(magnet_link)
 

def parse_args(args):

    options = {
        '--source': [False, '-s'],
        '--no-clean': [False, None],
        '--get-magnet': [False, None],
        '--vlc': [False, None],
        '--mpv': [False, None],
        '--list': [False, '-l'],
        '--fullscreen': [False, '-f'],
    }

    sources = ['1337x', 'nyaa']
    source = ''

    flags = []
    for key in options:
        flags.append(key)
        if options[key][1] is not None:
            flags.append(options[key][1])

    searched = False

    def get_query():
        query = ''
        for i in range(1, len(args)):
            if args[i] not in flags:
                query += args[i]
                query += '+'     
        if query != '':
            searched = True
            return query
        else:
            query = input('Enter search query: ')
            searched = True
            return query

    if len(args) == 1:
        query = get_query()
        searched = True
    else:

        if '--help' in args or '-h' in args:
            print()
            print('Usage: cthulhu [options] search-query\n')
            print('Options:')
            print(' {:15}\t{}'.format('-s, --source', 'Changes to specified source'))
            print(' {:15}\t{}'.format('--no-clean', 'Avoids deleting the torrent cache'))
            print(' {:15}\t{}'.format('--get-magnet', 'Prints the torrent magnet link'))
            print(' {:15}\t{}'.format('-l, --list', 'Lists all files in a torrent for selection'))
            print(' {:15}\t{}'.format('--vlc', 'Sets the player to vlc'))
            print()
            print('Sources:')
            for source in sources:
                print(' {}'.format(source))
            print()
            exit()

        # checks if flag is included in args and sets to True in dict
        # at the very least, it works ¯\_(ツ)_/¯
        for i in range(len(flags)):
            if flags[i] in args:
                try:
                    options[flags[i]][0] = True
                except KeyError:
                    options[flags[i-1]][0] = True
        
        # sets source
        if '--source' in args or '-s' in args:
            def parse_source(str):
                if args.index(str) == len(args)-1:
                    print('No source specified… Use \'-h\' to see a list of valid sources.')
                    exit()
                elif args[args.index(str)+1].lower() in sources:
                    source = args[args.index(str)+1].lower()
                    return source
                else:
                    print('Invalid source… Use \'-h\' to see a list of valid sources.')
                    exit()

            try:
                source = parse_source('--source')
            except ValueError:
                source = parse_source('-s')

        
    if not searched:
        if source != '':
            query = get_query().replace(source+'+', '')
        else:
            query = get_query()

    return (options, query, source)

def get_source(source_name):

    if source_name == '1337x':
        source = ThirteenThirtySevenX()
    elif source_name == 'nyaa':
        source = Nyaa()

    print('\nSource: '+ source_name)
    return source

def select_torrent(results, display_count):

    if display_count>len(results):
        display_count = len(results)
    
    # display data to user
    print('\033[1m ID\t    S/L\t\tSize\t\tTorrent name\033[0m')
    title_width = 0
    if os.get_terminal_size()[0] > 40:
        title_width = os.get_terminal_size()[0]-41
    for i in range(display_count): 
        torrent_name = results[i][0]
        if len(torrent_name) > title_width:
            torrent_name = torrent_name[0:title_width-1]+'…'
        seedleech = f'(S:{results[i][3]}, L:{results[i][4]})'
        size = results[i][5]+'  ' # couple extra spaces to make sure 3-digit sizes don't shift tabulations
        print(' \033[1m{:>2}\033[0m\t{:>5}/{:<5}\t{}\t{}'.format(i+1, results[i][3], results[i][4], size,
            torrent_name))

    selection = input('\nSelect by ID: ')
    try:
        while int(selection) not in range(1, display_count+1):
            print('ID "' + selection + '" not found, please try again.')
            selection = input('\nSelect by ID: ')
    except:
        print('"' + selection + '" is not a valid ID, please try again.')
        selection = input('\nSelect by ID: ')

    return selection

def search(get_responses, query):
    while len(query) < 3:
        print('Please make sure your query contains at least 3 characters')
        query = input('\nEnter search query: ')
    print('Fetching torrents…')

    get_responses(query)
    print()


#
# Source Classes
#

class ThirteenThirtySevenX:

    url = 'https://www.1337xxx.to/'

    @staticmethod 
    def get_responses(query):
        base = __class__.url
        responses.append(requests.get(f'{base}/category-search/{query}/Movies/1/').text)
        responses.append(requests.get(f'{base}/category-search/{query}/TV/1/').text)
        responses.append(requests.get(f'{base}/category-search/{query}/Anime/1/').text)

    @staticmethod 
    def parse_responses():

        packed_data = []
        titles = []
        seeders = []
        leechers = []
        upload_dates = []
        file_sizes = []
        links = []

        flag = 0
        num_response = 0
        for response in responses:
            
            num_response += 1
            
            root = html.fromstring(response).xpath('//tbody/tr')

            if not root:
                flag += 1

            for tr in root:
                # title
                tmp_title = tr.xpath('.//td//a/text()')[0]

                # torrent link
                tmp_torrent_link = tr.xpath('.//td//a/@href')[1]

                # [seeders, leechers, upload date, size]
                tmp_additional_data = tr.xpath('.//td/text()')

                titles.append(tmp_title)
                seeders.append(int(tmp_additional_data[0]))
                leechers.append(int(tmp_additional_data[1]))
                upload_dates.append(tmp_additional_data[2])
                file_sizes.append(tmp_additional_data[3])
                links.append(tmp_torrent_link)

        if flag == num_response:
            print('No results found.\n')
            exit()

        print(titles)
        for i in range(len(titles)):
            packed_data.append([titles[i], links[i], upload_dates[i], seeders[i], leechers[i], file_sizes[i]])

        # sort by seeder count
        sorted_data = sorted(packed_data, key=itemgetter(3), reverse=True)

        return sorted_data
  
    @staticmethod 
    def get_magnet_link(results, selection):
        base = __class__.url
        target_link = f'{base}{results[int(selection)-1][1]}'
        magnet_response = requests.get(target_link).text

        magnet_link = html.fromstring(magnet_response).xpath('//li/a/@href')[29]

        return magnet_link

class Nyaa:

    url = 'https://nyaa.si'

    @staticmethod 
    def get_responses(query):
        base = __class__.url
        responses.append(requests.get(f'{base}/?f=0&c=1_0&q={query}&s=seeders&o=desc').text)
        responses.append(requests.get(f'{base}/?f=0&c=2_0&q={query}&s=seeders&o=desc').text)
        responses.append(requests.get(f'{base}/?f=0&c=4_0&q={query}&s=seeders&o=desc').text)

    @staticmethod 
    def parse_responses():

        packed_data = []
        titles = []
        seeders = []
        leechers = []
        upload_dates = []
        file_sizes = []
        links = []

        flag = 0
        num_response = 0
        for response in responses:
            
            num_response += 1
            
            root = html.fromstring(response).xpath('//tbody/tr')

            if not root:
                flag += 1

            # if anyone knows a better way to parse the html on nyaa.si, please lmk
            # im literally crying rn (cthulhu -s nyaa naruto)
            for tr in root:
                # title
                tmp_title = tr.xpath('.//td//a/text()').pop()
                
                # torrent link
                tmp_torrent_link = tr.xpath('.//td//a/@href').pop()


                temp = tr.xpath('.//td/text()')
                temp.pop()

                # leechers
                tmp_leechers = temp.pop()

                # seeders
                tmp_seeders = temp.pop()

                # upload dates
                tmp_upload_date = temp.pop().split()[0]

                # file sizes
                tmp_file_size = temp.pop()

                titles.append(tmp_title)
                seeders.append(tmp_seeders)
                leechers.append(tmp_leechers)
                upload_dates.append(tmp_upload_date)
                file_sizes.append(tmp_file_size)
                links.append(tmp_torrent_link)

        if flag == num_response:
            print('No results found.\n')
            exit()

        for i in range(len(titles)):
            packed_data.append([titles[i], links[i], upload_dates[i], int(seeders[i]), int(leechers[i]), file_sizes[i]])

        # sort by seeder count
        sorted_data = sorted(packed_data, key=itemgetter(3), reverse=True)

        return sorted_data
  
    @staticmethod 
    def get_magnet_link(results, selection):
        
        magnet_link = results[int(selection)-1][1]

        return magnet_link


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print(' Interrupted.')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)
