#!/usr/bin/env python3

'''
The below code is probably garbage. This is my first 
real "project", so I am still learning the conventions 
and structures. For now, though, my policy is 
if the code works, it works.
'''

# TODO add config file for setting defaults 
# TODO ground work for adding different sources 

import os
import sys
from operator import itemgetter

try:
    import requests
except ImportError:
    print('error: requests is not installed (hint: pip install requests)')
    exit()

try:
    from lxml import html
except ImportError:
    print('error: lxml is not installed (hint: pip install lxml)')
    exit()

# can be changed to a mirror, might automate switching mirrors if 
# server doesn't respond or something
base_url = 'https://1337x.wtf'

responses = []

def main():

    player = 'mpv'

    mpv_exists = os.path.exists('/usr/bin/mpv')
    vlc_exists = os.path.exists('/usr/bin/vlc')
    if not mpv_exists and not vlc_exists:
        print(f'\033[31;1mError:\033[0m mpv or vlc not found… Exiting.')
        exit()
    elif not mpv_exists and vlc_exists:
        player = 'vlc'
    

    # creates /home/$USER/.config/cthulhu/ (not needed for now)
    """ os.makedirs(os.path.expanduser('~')+'/.config/cthulhu', exist_ok=True)
    cache_dir = os.path.expanduser('~')+'/.config/cthulhu' """

    # parsing arguments
    args = sys.argv
    parsed_args = parse_args(args)

    # change player to vlc if specified by --vlc
    if 'vlc' in parsed_args:
        player = 'vlc'

    list_mode = '-a'
    if 'list' in parsed_args:
        list_mode = '-l'

    # parsing html responses from search query
    final_results = parse_responses()
    
    # displays results for requesting magnet link
    magnet_link = get_magnet_link(final_results, display_count=20)

    if not 'get-magnet' in parsed_args:
        
        while True:
            # play selected torrent in peerflix
            os.system(f'peerflix --{player} {list_mode} \'{magnet_link}\'')
            if list_mode == '-l':
                verification = input('Continue watching another file in the torrent? [Y/n] ')
                if verification == 'n':
                    break
            else:
                break

        # cleans /tmp/webtorrent directory unless specified by --no-clean
        print('Cleaning /tmp/torrent-stream cache…')
        if 'no-clean' in parsed_args:
            os.system('rm -rf /tmp/torrent-stream')
    else: 
        print(magnet_link)
 

def parse_args(args):

    parsed_args = []

    # TODO implement fullscreen flag

    flags = ['-h', '--help', '--fast', '-m', '--movie', '-s', '--show', '-a', '--anime', 
    '--no-clean', '--get-magnet', '--vlc', '-l', '--list']

    searched = False

    def get_query(filtering='default'):
        query = ''
        for i in range(1, len(args)):
            if args[i] not in flags:
                query += args[i]
                if i != len(args)-1:
                    query += '+'       
        if query != '':
            search(query, filtering)
        else:
            query = input('Enter search query: ')
            search(query, filtering)
            searched = True

    if len(args) == 1:
        get_query()
        searched = True
    else:
        # -h, --help
        if flags[0] in args or flags[1] in args:
            print('Usage: cthulhu [options] search-query\n')
            print('Options:')
            print(' {:15}\t{}'.format('--fast', 'Searches without any category filter (faster responses)'))
            print(' {:15}\t{}'.format('-m, --movie', 'Only searches through Movie category'))
            print(' {:15}\t{}'.format('-s, --show', 'Only searches through Show category'))
            print(' {:15}\t{}'.format('-a, --anime', 'Only searches through Anime category'))
            print(' {:15}\t{}'.format('--no-clean', 'Avoids deleting the torrent cache'))
            print(' {:15}\t{}'.format('--get-magnet', 'Prints the torrent magnet link'))
            print(' {:15}\t{}'.format('--vlc', 'Sets the player to vlc'))
            print(' {:15}\t{}'.format('--list, -l', 'Lists all files in a torrent for selection'))
            print()
            exit()
        # --fast
        if flags[2] in args:
            if not searched:
                get_query(filtering='fast')
                searched = True
        # -m, --movie
        if flags[3] in args or flags[4] in args:
            if not searched:
                get_query(filtering='movie')
                searched = True
        # -s, --show
        if flags[5] in args or flags[6] in args:
            if not searched:
                get_query(filtering='show')
                searched = True
        # -a, --anime
        if flags[7] in args or flags[8] in args:
            if not searched:
                get_query(filtering='anime')
                searched = True
        # --no-clean
        if flags[9] in args:
            parsed_args.append('no-clean')
        # --get-magnet
        if flags[10] in args:
            parsed_args.append('get-magnet')
        # --vlc
        if flags[11] in args:
            parsed_args.append('vlc')
        # --list, -l
        if flags[12] in args or flags[13] in args:
            parsed_args.append('list')
        
        
    if not searched:
        get_query()


    return parsed_args


def search(search_query, filtering):

    while len(search_query) < 3:
        print('Please make sure your query contains at least 3 characters')
        search_query = input('\nEnter search query: ')
    print('Fetching torrents…', end=' ')
    if filtering == 'default':
        print()
        responses.append(requests.get(f'{base_url}/category-search/{search_query}/Movies/1/').text)
        responses.append(requests.get(f'{base_url}/category-search/{search_query}/TV/1/').text)
        responses.append(requests.get(f'{base_url}/category-search/{search_query}/Anime/1/').text)
    elif filtering == 'fast':
        print('Displaying non-filtered results')
        responses.append(requests.get(f'{base_url}/search/{search_query}/1/').text)
    elif filtering == 'movie':
        print('Displaying movies only:')
        responses.append(requests.get(f'{base_url}/category-search/{search_query}/Movies/1/').text)
    elif filtering == 'show':
        print('Displaying shows only:')
        responses.append(requests.get(f'{base_url}/category-search/{search_query}/TV/1/').text)
    elif filtering == 'anime':
        print('Displaying anime only:')
        responses.append(requests.get(f'{base_url}/category-search/{search_query}/Anime/1/').text)
    print()


def parse_responses():

    packed_data = []
    titles = []
    seeders = []
    leechers = []
    upload_dates = []
    file_sizes = []
    links = []

    flag = 0
    num_response = 0
    for response in responses:
        
        num_response += 1
        
        root = html.fromstring(response).xpath('//tbody/tr')

        if not root:
            flag += 1

        for tr in root:
            # title
            tmp_title = tr.xpath('.//td//a/text()')[0]

            # torrent link
            tmp_torrent_link = tr.xpath('.//td//a/@href')[1]

            # [seeders, leechers, upload date, size]
            tmp_additional_data = tr.xpath('.//td/text()')

            titles.append(tmp_title)
            seeders.append(int(tmp_additional_data[0]))
            leechers.append(int(tmp_additional_data[1]))
            upload_dates.append(tmp_additional_data[2])
            file_sizes.append(tmp_additional_data[3])
            links.append(tmp_torrent_link)

    if flag == num_response:
        print('No results found.\n')
        exit()

    for i in range(len(titles)):
        packed_data.append([titles[i], links[i], upload_dates[i], seeders[i], leechers[i], file_sizes[i]])

    # sort by seeder count
    sorted_data = sorted(packed_data, key=itemgetter(3), reverse=True)

    return sorted_data


def get_magnet_link(results, display_count):

    if display_count>len(results):
        display_count = len(results)
    
    # display data to user
    print('\033[0m ID\t    S/L\t\tSize\t\tTorrent name\033[0m')
    title_width = 0
    if os.get_terminal_size()[0] > 24:
        title_width = os.get_terminal_size()[0]-25
    for i in range(display_count): 
        torrent_name = results[i][0]
        if len(torrent_name) > title_width:
            torrent_name = torrent_name[0:title_width-3]+'…'
        seedleech = f'(S:{results[i][3]}, L:{results[i][4]})'
        size = results[i][5]+'  ' # couple extra spaces to make sure 3-digit sizes don't shift tabulations
        print(' \033[1m{:>2}\033[0m\t{:>5}/{:<5}\t{}\t{}'.format(i+1, results[i][3], results[i][4], size,
            torrent_name))

    selection = input('\nSelect by ID: ')
    try:
        while int(selection) not in range(1, display_count+1):
            print('ID "' + selection + '" not found, please try again.')
            selection = input('\nSelect by ID: ')
    except:
        print('"' + selection + '" is not a valid ID, please try again.')
        selection = input('\nSelect by ID: ')

    target_link = f'{base_url}{results[int(selection)-1][1]}'
    magnet_response = requests.get(target_link).text

    magnet_link = html.fromstring(magnet_response).xpath('//li/a/@href')[29]

    return magnet_link


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print(' Interrupted.')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)
